#!/usr/bin/python

import argparse
import sys
import os
import re 
## =================================================================
## Split a big alignement .sam file into several files.
## One for each reference genome.
## This might cause problem if there are too many reference sequences.
## =================================================================
def SplitSam(samFile,outputDir,rname=None):
    ''' From a sam file generated by aligning reads/contigs to many reference seqs,
        generate one sam file for each reference seq, each includes the reads aligning with it.
        
        Input:  samFile
        Output: outputDir - directory to store the output .sam files.
    '''
    if not os.path.exists(outputDir):
        os.makedirs(outputDir)
    
    headerLines = '' # common for all .sam files
    headerLinesWritten = False
    Refs = dict()
    SQDict = dict()
    #print rname
    if not os.path.exists(outputDir):
        os.mkdir(outputDir)
    HDline = ""
    RGline = ""
    PGline = ""
    with open(samFile, 'r') as f:
        for line in f:
            if line[0]=='@': #header line
                if line[1:3] == 'HD':
                    HDline = line
                elif line[1:3] == 'RG':
                    RGline = line
                elif line[1:3] == 'PG':
                    PGline = line
                elif line[1:3] == 'SQ':
                    RefName = line.strip('\n').split('\t')[1][3:] # the name of refseq
                    if rname != None and RefName == rname:
                        RefFile = outputDir + '/' + re.sub('/','__',RefName) + '.sam'
                        RefFileHandle = open(RefFile,'a')
                        Refs[RefName] = RefFileHandle
                        SQDict[RefName] = line
                    elif rname == None:    
                        RefFile = outputDir + '/' + re.sub('/','__',RefName) + '.sam'
                        RefFileHandle = open(RefFile,'a')
                        Refs[RefName] = RefFileHandle
                        SQDict[RefName] = line
            else:
                if not headerLinesWritten: # write the common header lines to each sam file
                    for key in Refs:
                        Refs[key].write(HDline + SQDict[key] + RGline + PGline)
                        #sys.stdout.write(HDline + SQDict[key] + RGline + PGline)
                    headerLinesWritten = True
                refName = line.split('\t')[2] # write this line to the corresponding sam file
                #print refName
                if Refs.has_key(refName):
                    Refs[refName].write(line)

    for key in Refs: # finish writing and close the files
        Refs[key].close()

## =================================================================
## argument parser
## =================================================================
parser = argparse.ArgumentParser(description="Split a big alignement .sam file into several files",
                                 prog = 'SplitSam', #program name
                                 prefix_chars='-', # prefix for options
                                 fromfile_prefix_chars='@', # if options are read from file, '@args.txt'
                                 conflict_handler='resolve', # for handling conflict options
                                 add_help=True, # include help in the options
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter # print default values for options in help message
                                 )

## input files and directories
parser.add_argument("-i","--in",help="input sam file",dest='samFile',required=True)
parser.add_argument("-r","--ref",help="reference sequence name to extract",dest='rname',default=None)

## output directory
parser.add_argument("-o","--out",help="output directory",dest='outputDir',required=True)

## =================================================================
## main function
## =================================================================
def main(argv=None):
    
    if argv is None:
        args = parser.parse_args()

    SplitSam(args.samFile,args.outputDir,args.rname)

##==============================================================
## call from command line (instead of interactively)
##==============================================================

if __name__ == '__main__':
    sys.exit(main())
